
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073e  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062c  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a0  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  000017f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  7a:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:
	if(UDR == 0x31)
		USART_putstring("Poprawny przycisk ");
	else
		USART_putstring("Niepoprawny przycisk ");
	_delay_ms(5000);
}
  82:	10 bc       	out	0x20, r1	; 32
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <USART_putchar>:
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USART_putchar>
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <USART_putstring>:
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	8c 01       	movw	r16, r24
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <USART_putstring+0x1e>
  aa:	f8 01       	movw	r30, r16
  ac:	ec 0f       	add	r30, r28
  ae:	fd 1f       	adc	r31, r29
  b0:	80 81       	ld	r24, Z
  b2:	0e 94 49 00 	call	0x92	; 0x92 <USART_putchar>
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	f8 01       	movw	r30, r16
  ba:	01 90       	ld	r0, Z+
  bc:	00 20       	and	r0, r0
  be:	e9 f7       	brne	.-6      	; 0xba <USART_putstring+0x20>
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	e0 1b       	sub	r30, r16
  c4:	f1 0b       	sbc	r31, r17
  c6:	ce 17       	cp	r28, r30
  c8:	df 07       	cpc	r29, r31
  ca:	78 f3       	brcs	.-34     	; 0xaa <USART_putstring+0x10>
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <diody>:

unsigned char diody()
{
	while ((UCSRA & (1<<RXC))==0); /* Wait till data is received */
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <diody>
	if(UDR == 0x31)
  da:	8c b1       	in	r24, 0x0c	; 12
  dc:	81 33       	cpi	r24, 0x31	; 49
  de:	21 f4       	brne	.+8      	; 0xe8 <diody+0x12>
	PORTA ^= 1<<1;
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	89 27       	eor	r24, r25
  e6:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x32)
  e8:	8c b1       	in	r24, 0x0c	; 12
  ea:	82 33       	cpi	r24, 0x32	; 50
  ec:	21 f4       	brne	.+8      	; 0xf6 <diody+0x20>
	PORTA ^= 1<<2;
  ee:	9b b3       	in	r25, 0x1b	; 27
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	89 27       	eor	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x33)
  f6:	8c b1       	in	r24, 0x0c	; 12
  f8:	83 33       	cpi	r24, 0x33	; 51
  fa:	21 f4       	brne	.+8      	; 0x104 <diody+0x2e>
	PORTA ^= 1<<3;
  fc:	9b b3       	in	r25, 0x1b	; 27
  fe:	88 e0       	ldi	r24, 0x08	; 8
 100:	89 27       	eor	r24, r25
 102:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x34)
 104:	8c b1       	in	r24, 0x0c	; 12
 106:	84 33       	cpi	r24, 0x34	; 52
 108:	21 f4       	brne	.+8      	; 0x112 <diody+0x3c>
	PORTA ^= 1<<4;
 10a:	9b b3       	in	r25, 0x1b	; 27
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	89 27       	eor	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x35)
 112:	8c b1       	in	r24, 0x0c	; 12
 114:	85 33       	cpi	r24, 0x35	; 53
 116:	21 f4       	brne	.+8      	; 0x120 <diody+0x4a>
	PORTA ^= 1<<5;
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	89 27       	eor	r24, r25
 11e:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x36)
 120:	8c b1       	in	r24, 0x0c	; 12
 122:	86 33       	cpi	r24, 0x36	; 54
 124:	21 f4       	brne	.+8      	; 0x12e <diody+0x58>
	PORTA ^= 1<<6;
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	89 27       	eor	r24, r25
 12c:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x37)
 12e:	8c b1       	in	r24, 0x0c	; 12
 130:	87 33       	cpi	r24, 0x37	; 55
 132:	19 f4       	brne	.+6      	; 0x13a <diody+0x64>
	PORTA ^= 1<<7;
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	80 58       	subi	r24, 0x80	; 128
 138:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x38)
 13a:	8c b1       	in	r24, 0x0c	; 12
 13c:	88 33       	cpi	r24, 0x38	; 56
 13e:	11 f4       	brne	.+4      	; 0x144 <diody+0x6e>
	PORTA ^= 1<<8;
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x39)
 144:	8c b1       	in	r24, 0x0c	; 12
 146:	89 33       	cpi	r24, 0x39	; 57
 148:	11 f4       	brne	.+4      	; 0x14e <diody+0x78>
	PORTA ^= 1<<9;
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	8b bb       	out	0x1b, r24	; 27
	if(UDR == 0x63)
 14e:	8c b1       	in	r24, 0x0c	; 12
 150:	83 36       	cpi	r24, 0x63	; 99
 152:	09 f4       	brne	.+2      	; 0x156 <diody+0x80>
	PORTA = 0x00;
 154:	1b ba       	out	0x1b, r1	; 27
	if(UDR == 0x73)
 156:	8c b1       	in	r24, 0x0c	; 12
 158:	83 37       	cpi	r24, 0x73	; 115
 15a:	19 f4       	brne	.+6      	; 0x162 <diody+0x8c>
	PORTA = 0xFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	08 95       	ret
	else
	USART_putstring("Blad - zly przycisk");
 162:	80 ea       	ldi	r24, 0xA0	; 160
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 4d 00 	call	0x9a	; 0x9a <USART_putstring>
}
 16a:	08 95       	ret

0000016c <main>:


int main(void)
{
	USART_Init();
 16c:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
    /* Replace with your application code */
	DDRA=0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {		
			//_delay_ms(5000);
			//USART_putstring("Kacper Papinski ");
			//UART_RxChar();
			diody();
 174:	0e 94 6b 00 	call	0xd6	; 0xd6 <diody>
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x8>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
